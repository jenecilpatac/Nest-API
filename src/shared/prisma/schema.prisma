generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  pending
  done
  ongoing
  cancelled
}

enum privacy {
  public
  private
  friends
}

enum gender {
  Male
  Female
  NonBinary
  Other
  PreferNotToSay
}

model users {
  id               String             @id @default(uuid())
  name             String?
  address          String?
  dateOfBirth      DateTime?          @db.Date
  phoneNumber      String?
  email            String?            @unique
  username         String?            @unique
  emailVerifiedAt  DateTime?          @db.Timestamptz(6)
  password         String?
  rememberToken    String?            @unique
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  provider         String?
  gender           gender?            @default(PreferNotToSay)
  providerId       String?            @unique
  bio              String?
  jobTitle         String?
  posts            posts[]
  todos            todos[]
  roles            roles[]            @relation("UserRoles")
  profile_pictures profile_pictures[]
  cover_photos     cover_photos[]
  likes            likes[]
  comments         comments[]
  senderChats      chats[]            @relation("SenderChats")
  receiverChats    chats[]            @relation("ReceiverChats")
  messages         messages[]
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users users[] @relation("UserRoles")
}

model categories {
  id           Int      @id @default(autoincrement())
  categoryName String   @unique @db.VarChar(255)
  description  String?
  slug         String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  posts        posts[]  @relation("posts")
}

model posts {
  id          Int         @id @default(autoincrement())
  image       String[]
  userId      String?
  categoryId  Int?
  publishedAs privacy     @default(public)
  description String?
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  category    categories? @relation("posts", fields: [categoryId], references: [id], onDelete: Restrict)
  user        users?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  likes       likes[]
  comments    comments[]
}

model todos {
  id        Int      @id @default(autoincrement())
  userId    String?
  title     String?
  content   String
  status    status   @default(pending)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user      users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model profile_pictures {
  id          Int      @id @default(autoincrement())
  userId      String?
  avatar      String
  isSet       Boolean?
  publishedAs privacy  @default(public)
  user        users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model cover_photos {
  id          Int      @id @default(autoincrement())
  userId      String?
  avatar      String
  isSet       Boolean?
  publishedAs privacy  @default(public)
  user        users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model likes {
  id        Int      @id @default(autoincrement())
  userId    String?
  postId    Int?
  post      posts?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model comments {
  id        Int      @id @default(autoincrement())
  userId    String?
  postId    Int?
  comment   String?
  post      posts?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model chats {
  id         Int        @id @default(autoincrement())
  senderId   String?
  receiverId String?
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  messages   messages[]
  sender     users?     @relation("SenderChats", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   users?     @relation("ReceiverChats", fields: [receiverId], references: [id], onDelete: Cascade)
}

model messages {
  id         Int      @id @default(autoincrement())
  userId     String?
  sentBy     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId     Int?
  content    String?
  attachment String?
  isSeen     Boolean? @default(false)
  chat       chats?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}
